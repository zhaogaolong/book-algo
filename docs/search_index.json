{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["introduct"],"linked-list/链表操作.html":["!=","(",")","*","*/","*listnod","*listnode)","*listnode,","*listnode{","/**","//","2/",":=","=","==","bool","break","chang","cn.com/problems/coin","cn.com/problems/link","cn.com/problems/merg","cn.com/problems/revers","cn.com/problems/swap","curr","curr.next","cycl","cycle/","cycle/submissions/","definit","detectcycle(head","dfs(head,","dfs(newhead,","fals","fast","fast,","fast.next","fast.next.next","fast{","for{","func","hascycle(head","head","head)","head,","head.next","https://leetcod","ii","ii/","int","l1","l1.val","l2","link","list","list.","list/","listnod","lists/submissions/","mergetwolists(l1","n","n.next","newhead","next","nil","nil)","nil{","node","old","pairs/submissions/","pre","return","reverselist(head","singli","slow","slow,","slow.next","slow{","sort","struct","swappairs(head","swappairs(head.next.next)","true","two","type","val","var","{","||","}","}els","同时出发","循环实现","是否有环","环在那个位置","环形链表","环链表","递归实现","链接","链表合并","链表操作","链表是否有环","链表相邻两节点调换","链表翻转","问题名称"],"hash_table/hash_table.html":["!=","0{","1","1.","169.","242.","49.","50%",":=","=",">","[][]string","[]byte(s)","[]int","[]int)","[]int,","[]int{j,","[]string)","_,","anagram/","anagrams/","append","bool","bool{","cn.com/problems/group","cn.com/problems/major","cn.com/problems/two","cn.com/problems/valid","count","data","data[n]","data[s[i]]++","data[t[i]]","data[v]","data[v]++","data{","element/","fals","func","func(i,","groupanagrams(str","half","half{","hash","https://leetcod","i,","int","int)","isanagram(","i}","j","j,","key","kind","len(nums)/2","len(s)","len(t){","majorityelement(num","map","map[byte]int{}","map[int]int{}","map[string][]string{}","n","nil","num","num,count","nums{","ok","ok{","rang","return","s","sort","sort.slice(v,","string)","string,","strs{","sum/","s{","t","tabl","target","true","twosum(num","v","v[i]","{","}","两个单词的字母数量是否相同","两之和","两数之和","原理：","多数元素","字母异位词分组","异位词：","排序作为","放到","是指该元素在这个数组中出现的次数超过数组的","有效的字母异位词","然后","相同的移位词分到一个组里","进去","里，","链接","问题名称","首先把每个单词使用"],"tree/binary-tree.html":["!=","#","&treenode{val:",")","*","*/","*listnod","*node","*node)","*node){","*node,level","*tree","*tree){","*treenod","*treenode)","*treenode,","+1","/**","//","0","0)","0{","1","102.","104.","111.","144.","145.","1;","1]","1],","226.","236.","3","429.","5","589.","590.","8","94.","98.",":=","=","==",">",">=0;","[]*node","[]*node)(*node,","[]*node){","[]*node{root}","[]*treenode)(*treenode,","[]*treenode){","[]*treenode{root}","[]*treenode{}","[]*tree{root}","[][]int","[][]int{}","[]int","[]int,","[]int{","[]int{}","[]int{})","\\","ancestor","append([]int{n},","append(res,","append(res[level],","append(stack,","append(stack,node.right,","ari","b","binari","bool","b{","children","cn.com/problems/binari","cn.com/problems/invert","cn.com/problems/lowest","cn.com/problems/maximum","cn.com/problems/minimum","cn.com/problems/n","cn.com/problems/valid","common","continu","definit","depth","dfs(root","dfs(root)","dfs(root,","dfs(root.children[i])","dfs(root.children[i],","dfs(root.left)","dfs(root.left,","dfs(root.right)","dfs(root.right,","easi","func","https://leetcod","inord","inordertraversal(root","insert(num","insert(res,","int","int)","int){","int{","inverttree(root","inverttree(root.left)","inverttree(root.right)","isvalidbst(root","l","left","len(node.children)","len(res)","len(stack)","level","level+1)","levelorder(root","level{","lowestcommonancestor(root,","lowestcommonancestor(root.left,","lowestcommonancestor(root.right,","make([][]int,","max(a,","max(l,","maxdepth(root","maxdepth(root.left)","maxdepth(root.right)","medium","min","min(a,","min(l,","mindepth(root","mindepth(root.left)","mindepth(root.right)","n","nil","nil{","node","node)","node,","node.","node.children...)","node.children[i])","node.left","node.left)","node.left,","node.right","node.right)","node.val)","nums...)","order","p,","p,q)","p.val","pop(stack","pop(stack)","postord","postorder(root","postordertraversal(root","preorder","preorder(root","preordertraversal(root","q","q.val","r","r)","rang","re","res[level]","return","right","root","root.children{","root.left","root.left,","root.right","root.right,","root.val","root.val)","root.val{","search","stack","stack[:len(stack)","stack[len(stack)","struct","todo","traversal/","tree","tree(root","tree/","treenod","treenode.","true","type","val","var","{","||","}","}els","}else{","二叉树","二叉树的中序遍历","二叉树的前序遍历","二叉树的后序遍历","二叉树的层序遍历","二叉树的最大深度","二叉树的最小深度","二叉树的最近公共祖先","例子：","叉树的前序遍历","叉树的后序遍历","叉树的层序遍历","模板","注意：如果树的一个子节点为空，另一个子节点不为空的话，前一个子节点就不能算。","翻转二叉树","迭代","迭代实现","递归","递归实现","链接","问题名称","难度","验证二叉搜索树"],"DP/":["[爬楼梯]","cn.com/problems/climb","dp","https://leetcod","stairs/","最优子问题","问题的循序渐进"],"DP/最优子问题.html":["198.","2/","213.","322.","518.","62.","63.","70.","chang","change/","cn.com/problems/climb","cn.com/problems/coin","cn.com/problems/hous","cn.com/problems/uniqu","https://leetcod","ii","ii/","path","paths/","robber","robber/","stairs/","不同路径","异位词问题","打家劫舍","最优子问题","爬楼梯","链接","问题名称","零钱兑换"]},"length":6},"tokenStore":{"root":{"0":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.005535055350553505}}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}}},"1":{"0":{"2":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"4":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"docs":{}},"1":{"1":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"4":{"4":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"5":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"6":{"9":{"docs":{},".":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}},"docs":{}},"9":{"8":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"docs":{}},"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},".":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},";":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},"]":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}}}},"2":{"1":{"3":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"docs":{}},"2":{"6":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"3":{"6":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"docs":{}},"4":{"2":{"docs":{},".":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}},"docs":{}},"docs":{},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"3":{"2":{"2":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"docs":{}},"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},"4":{"2":{"9":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"9":{"docs":{},".":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}},"docs":{}},"5":{"0":{"docs":{},"%":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"1":{"8":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"docs":{}},"8":{"9":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"9":{"0":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},"6":{"2":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"3":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"docs":{}},"7":{"0":{"docs":{},".":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"docs":{}},"8":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},"9":{"4":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"8":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"docs":{}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.013837638376383764}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":11}}}}}}}},")":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.06666666666666667}},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"(":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}},"}":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"!":{"docs":{},"=":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"(":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},")":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},"*":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.07462686567164178},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.06826568265682657}},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.03233830845771144},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"e":{"docs":{},")":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.017412935323383085}}},",":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},"{":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},",":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},")":{"docs":{},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.01937269372693727}},"e":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.008302583025830259}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}},"/":{"docs":{},"*":{"docs":{},"*":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}}},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}}}},":":{"docs":{},"=":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.012437810945273632},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.08045977011494253},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.02029520295202952}}}},"=":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.03482587064676617},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.024907749077490774}},"=":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.03980099502487562},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.02859778597785978}}}},"b":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}}}}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}},"e":{"docs":{},"/":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}}}}}}}}},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"DP/":{"ref":"DP/","tf":0.125},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"n":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.012437810945273632}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}},"e":{"docs":{},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}}}}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.017241379310344827}},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}},"v":{"docs":{},"]":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"+":{"docs":{},"+":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}}}},"p":{"docs":{"DP/":{"ref":"DP/","tf":10.25}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}},"s":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.024875621890547265}},",":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}}}}}}}},"{":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}},"o":{"docs":{},"r":{"docs":{},"{":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.017412935323383085},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.022988505747126436},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.025830258302583026}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}}}},"h":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":5.005747126436781}}}},"l":{"docs":{},"f":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.02736318407960199}},")":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},",":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.01990049751243781}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.01990049751243781},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.022988505747126436},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.01107011070110701},"DP/":{"ref":"DP/","tf":0.125},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.15555555555555556}}}}}}}}}}}}}}}}},"l":{"1":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}},"2":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179}}},"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.005535055350553505}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.017412935323383085}}}},"s":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179}},".":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358}}},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358}}}}},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"/":{"2":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},"docs":{}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.005535055350553505}}}}}}}},"t":{"docs":{},")":{"docs":{},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}},"f":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.008302583025830259}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}},"+":{"1":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}}},"docs":{}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"1":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},"docs":{}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.006457564575645757}}}}}}},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}},"p":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"[":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"{":{"docs":{},"}":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"{":{"docs":{},"}":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"{":{"docs":{},"}":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}},"x":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"l":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"l":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.007380073800738007}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}},"e":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.022388059701492536}}}}},"i":{"docs":{},"l":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.024875621890547265},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}},")":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},"{":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.024875621890547265},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.025830258302583026}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.016605166051660517}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.01107011070110701}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},",":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}},"s":{"docs":{},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}},"k":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}},"s":{"docs":{},"/":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}}}},"r":{"docs":{},"e":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.009950248756218905}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},"q":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.006457564575645757}},"e":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.026752767527675275}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.03980099502487562},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.04597701149425287},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.042435424354243544}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"]":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.034482758620689655},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.008302583025830259}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.021217712177121772}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}},"b":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}},"/":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}}}}}},"s":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.012437810945273632}},",":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.007462686567164179}}}}}}},"{":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},".":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"s":{"docs":{},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.014760147601476014}},"[":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}}}}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DP/":{"ref":"DP/","tf":0.125},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"{":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"t":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.006457564575645757}}}}}}}}}},"e":{"docs":{},"e":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.013837638376383764}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}},"/":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.008302583025830259}},"e":{"docs":{},".":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}},"w":{"docs":{},"o":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":5.005747126436781}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}}}}},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"v":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.034482758620689655}},"a":{"docs":{},"l":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.014925373134328358},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.011992619926199263}}},"r":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.008302583025830259}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"{":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.03233830845771144},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.022988505747126436},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.024907749077490774}}},"|":{"docs":{},"|":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.012437810945273632},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"}":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.06467661691542288},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.06896551724137931},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.07195571955719557}},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"e":{"docs":{},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"同":{"docs":{},"时":{"docs":{},"出":{"docs":{},"发":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}},"循":{"docs":{},"环":{"docs":{},"实":{"docs":{},"现":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"环":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}},"指":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"超":{"docs":{},"过":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}}},"环":{"docs":{},"在":{"docs":{},"那":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}}},"形":{"docs":{},"链":{"docs":{},"表":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}},"链":{"docs":{},"表":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}},"递":{"docs":{},"归":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},"实":{"docs":{},"现":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}},"链":{"docs":{},"接":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}},"表":{"docs":{},"合":{"docs":{},"并":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}},"操":{"docs":{},"作":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":10.002487562189055}}}},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"环":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263}}}}}},"相":{"docs":{},"邻":{"docs":{},"两":{"docs":{},"节":{"docs":{},"点":{"docs":{},"调":{"docs":{},"换":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}}}}},"翻":{"docs":{},"转":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.004975124378109453}}}}}},"问":{"docs":{},"题":{"docs":{},"名":{"docs":{},"称":{"docs":{"linked-list/链表操作.html":{"ref":"linked-list/链表操作.html","tf":0.0024875621890547263},"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}},"的":{"docs":{},"循":{"docs":{},"序":{"docs":{},"渐":{"docs":{},"进":{"docs":{"DP/":{"ref":"DP/","tf":0.125}}}}}}}}},">":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.006457564575645757}},"=":{"0":{"docs":{},";":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"docs":{}}},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}},"{":{"docs":{},"}":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.006457564575645757}},")":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609},"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}},"j":{"docs":{},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"}":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.006457564575645757}},")":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}},"*":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}},")":{"docs":{},"(":{"docs":{},"*":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}},"{":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"}":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},"(":{"docs":{},"*":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}}}}}}}}}}}},"{":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}}},"{":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"}":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}},"}":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}},"{":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"}":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{},"]":{"docs":{"DP/":{"ref":"DP/","tf":0.125}}}}}}},"_":{"docs":{},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.017241379310344827}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"/":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},"s":{"docs":{},"/":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"{":{"docs":{},"n":{"docs":{},"}":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.005535055350553505}}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"/":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.004612546125461255}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}},"j":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}},",":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"两":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"数":{"docs":{},"量":{"docs":{},"是":{"docs":{},"否":{"docs":{},"相":{"docs":{},"同":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}},"之":{"docs":{},"和":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"数":{"docs":{},"之":{"docs":{},"和":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"原":{"docs":{},"理":{"docs":{},"：":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}},"多":{"docs":{},"数":{"docs":{},"元":{"docs":{},"素":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}}}},"字":{"docs":{},"母":{"docs":{},"异":{"docs":{},"位":{"docs":{},"词":{"docs":{},"分":{"docs":{},"组":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}}}}}}},"异":{"docs":{},"位":{"docs":{},"词":{"docs":{},"：":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}},"问":{"docs":{},"题":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}}}},"排":{"docs":{},"序":{"docs":{},"作":{"docs":{},"为":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}},"放":{"docs":{},"到":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"异":{"docs":{},"位":{"docs":{},"词":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.011494252873563218}}}}}}}}}},"然":{"docs":{},"后":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"移":{"docs":{},"位":{"docs":{},"词":{"docs":{},"分":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"组":{"docs":{},"里":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}}}}},"进":{"docs":{},"去":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"里":{"docs":{},"，":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}},"首":{"docs":{},"先":{"docs":{},"把":{"docs":{},"每":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"使":{"docs":{},"用":{"docs":{"hash_table/hash_table.html":{"ref":"hash_table/hash_table.html","tf":0.005747126436781609}}}}}}}}}}},"#":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}},"&":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"{":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}},"+":{"1":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0036900369003690036}}},"docs":{}},"\\":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0027675276752767526}}},"q":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":10.000922509225092}},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"层":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}},"小":{"docs":{},"深":{"docs":{},"度":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}},"例":{"docs":{},"子":{"docs":{},"：":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}},"层":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}},"模":{"docs":{},"板":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"注":{"docs":{},"意":{"docs":{},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"树":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"前":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"就":{"docs":{},"不":{"docs":{},"能":{"docs":{},"算":{"docs":{},"。":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"翻":{"docs":{},"转":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}},"迭":{"docs":{},"代":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}},"实":{"docs":{},"现":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}}}},"难":{"docs":{},"度":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0009225092250922509}}}},"验":{"docs":{},"证":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{"tree/binary-tree.html":{"ref":"tree/binary-tree.html","tf":0.0018450184501845018}}}}}}}}},"最":{"docs":{},"优":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{"DP/":{"ref":"DP/","tf":0.125},"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":10.022222222222222}}}}}}},"不":{"docs":{},"同":{"docs":{},"路":{"docs":{},"径":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}}}},"打":{"docs":{},"家":{"docs":{},"劫":{"docs":{},"舍":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}}}},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.022222222222222223}}}}},"零":{"docs":{},"钱":{"docs":{},"兑":{"docs":{},"换":{"docs":{"DP/最优子问题.html":{"ref":"DP/最优子问题.html","tf":0.044444444444444446}}}}}}},"length":473},"corpusTokens":["!=","#","&treenode{val:","(",")","*","*/","*listnod","*listnode)","*listnode,","*listnode{","*node","*node)","*node){","*node,level","*tree","*tree){","*treenod","*treenode)","*treenode,","+1","/**","//","0","0)","0{","1","1.","102.","104.","111.","144.","145.","169.","198.","1;","1]","1],","2/","213.","226.","236.","242.","3","322.","429.","49.","5","50%","518.","589.","590.","62.","63.","70.","8","94.","98.",":=","=","==",">",">=0;","[]*node","[]*node)(*node,","[]*node){","[]*node{root}","[]*treenode)(*treenode,","[]*treenode){","[]*treenode{root}","[]*treenode{}","[]*tree{root}","[][]int","[][]int{}","[][]string","[]byte(s)","[]int","[]int)","[]int,","[]int{","[]int{j,","[]int{}","[]int{})","[]string)","[爬楼梯]","\\","_,","anagram/","anagrams/","ancestor","append","append([]int{n},","append(res,","append(res[level],","append(stack,","append(stack,node.right,","ari","b","binari","bool","bool{","break","b{","chang","change/","children","cn.com/problems/binari","cn.com/problems/climb","cn.com/problems/coin","cn.com/problems/group","cn.com/problems/hous","cn.com/problems/invert","cn.com/problems/link","cn.com/problems/lowest","cn.com/problems/major","cn.com/problems/maximum","cn.com/problems/merg","cn.com/problems/minimum","cn.com/problems/n","cn.com/problems/revers","cn.com/problems/swap","cn.com/problems/two","cn.com/problems/uniqu","cn.com/problems/valid","common","continu","count","curr","curr.next","cycl","cycle/","cycle/submissions/","data","data[n]","data[s[i]]++","data[t[i]]","data[v]","data[v]++","data{","definit","depth","detectcycle(head","dfs(head,","dfs(newhead,","dfs(root","dfs(root)","dfs(root,","dfs(root.children[i])","dfs(root.children[i],","dfs(root.left)","dfs(root.left,","dfs(root.right)","dfs(root.right,","dp","easi","element/","fals","fast","fast,","fast.next","fast.next.next","fast{","for{","func","func(i,","groupanagrams(str","half","half{","hascycle(head","hash","head","head)","head,","head.next","https://leetcod","i,","ii","ii/","inord","inordertraversal(root","insert(num","insert(res,","int","int)","int){","introduct","int{","inverttree(root","inverttree(root.left)","inverttree(root.right)","isanagram(","isvalidbst(root","i}","j","j,","key","kind","l","l1","l1.val","l2","left","len(node.children)","len(nums)/2","len(res)","len(s)","len(stack)","len(t){","level","level+1)","levelorder(root","level{","link","list","list.","list/","listnod","lists/submissions/","lowestcommonancestor(root,","lowestcommonancestor(root.left,","lowestcommonancestor(root.right,","majorityelement(num","make([][]int,","map","map[byte]int{}","map[int]int{}","map[string][]string{}","max(a,","max(l,","maxdepth(root","maxdepth(root.left)","maxdepth(root.right)","medium","mergetwolists(l1","min","min(a,","min(l,","mindepth(root","mindepth(root.left)","mindepth(root.right)","n","n.next","newhead","next","nil","nil)","nil{","node","node)","node,","node.","node.children...)","node.children[i])","node.left","node.left)","node.left,","node.right","node.right)","node.val)","num","num,count","nums...)","nums{","ok","ok{","old","order","p,","p,q)","p.val","pairs/submissions/","path","paths/","pop(stack","pop(stack)","postord","postorder(root","postordertraversal(root","pre","preorder","preorder(root","preordertraversal(root","q","q.val","r","r)","rang","re","res[level]","return","reverselist(head","right","robber","robber/","root","root.children{","root.left","root.left,","root.right","root.right,","root.val","root.val)","root.val{","s","search","singli","slow","slow,","slow.next","slow{","sort","sort.slice(v,","stack","stack[:len(stack)","stack[len(stack)","stairs/","string)","string,","strs{","struct","sum/","swappairs(head","swappairs(head.next.next)","s{","t","tabl","target","todo","traversal/","tree","tree(root","tree/","treenod","treenode.","true","two","twosum(num","type","v","v[i]","val","var","{","||","}","}els","}else{","不同路径","两个单词的字母数量是否相同","两之和","两数之和","二叉树","二叉树的中序遍历","二叉树的前序遍历","二叉树的后序遍历","二叉树的层序遍历","二叉树的最大深度","二叉树的最小深度","二叉树的最近公共祖先","例子：","原理：","叉树的前序遍历","叉树的后序遍历","叉树的层序遍历","同时出发","多数元素","字母异位词分组","异位词问题","异位词：","循环实现","打家劫舍","排序作为","放到","是否有环","是指该元素在这个数组中出现的次数超过数组的","最优子问题","有效的字母异位词","模板","注意：如果树的一个子节点为空，另一个子节点不为空的话，前一个子节点就不能算。","然后","爬楼梯","环在那个位置","环形链表","环链表","相同的移位词分到一个组里","翻转二叉树","进去","迭代","迭代实现","递归","递归实现","里，","链接","链表合并","链表操作","链表是否有环","链表相邻两节点调换","链表翻转","问题名称","问题的循序渐进","难度","零钱兑换","首先把每个单词使用","验证二叉搜索树"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\n"},"linked-list/链表操作.html":{"url":"linked-list/链表操作.html","title":"链表操作","keywords":"","body":"链表操作\n\n\n\n问题名称\n链接\n\n\n\n\n链表翻转\nhttps://leetcode-cn.com/problems/reverse-linked-list/\n\n\n链表相邻两节点调换\nhttps://leetcode-cn.com/problems/swap-nodes-in-pairs/submissions/\n\n\n环形链表\nhttps://leetcode-cn.com/problems/linked-list-cycle/\n\n\n环形链表-II\nhttps://leetcode-cn.com/problems/coin-change-2/\n\n\n\n链表翻转\n\n循环实现\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    if head == nil{\n        return nil\n    }\n    var (\n        pre *ListNode\n        curr *ListNode\n    )\n    curr = head\n    for curr != nil {\n        old := curr.Next\n        curr.Next = pre\n        pre = curr\n        curr = old\n    }\n    return pre\n}\n\n\n递归实现\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    if head == nil{\n        return nil\n    }\n    return dfs(head, nil)\n}\n\nfunc dfs(head, next *ListNode) *ListNode{\n    if head == nil{\n        return next\n    }\n    newHead := head.Next\n    head.Next = next\n    return dfs(newHead, head)\n}\n\n链表相邻两节点调换\n\nhttps://leetcode-cn.com/problems/swap-nodes-in-pairs/submissions/\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil{\n        return head\n    }\n    n := head.Next\n    head.Next = swapPairs(head.Next.Next)\n    n.Next = head\n    return n\n}\n\n链表是否有环\n\nhttps://leetcode-cn.com/problems/linked-list-cycle/submissions/\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc hasCycle(head *ListNode) bool {\n    if head == nil || head.Next == nil{\n        return false\n    }\n    slow, fast := head, head.Next\n    for fast != slow{\n        if fast == nil || fast.Next == nil{\n            return false\n        }\n        fast = fast.Next.Next\n        slow = slow.Next\n    }\n    return true\n}\n\n环链表 II\n\nhttps://leetcode-cn.com/problems/linked-list-cycle-ii/\n\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc detectCycle(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil{\n        return nil\n    }\n    // 同时出发\n    fast, slow := head, head\n    // 是否有环\n    for{\n        if fast == nil || fast.Next == nil{\n            return nil\n        }\n        slow = slow.Next\n        fast = fast.Next.Next\n        if slow == fast{\n            break\n        }\n    }\n    // 环在那个位置\n    fast = head\n    for fast != slow{\n        fast = fast.Next\n        slow = slow.Next\n    }\n    return fast\n}\n\n链表合并\n\nhttps://leetcode-cn.com/problems/merge-two-sorted-lists/submissions/\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\n    if l1 == nil{\n        return l2\n    }else if l2 == nil{\n        return l1\n    }\n    if l1.Val \n"},"hash_table/hash_table.html":{"url":"hash_table/hash_table.html","title":"hash table","keywords":"","body":"hash table\n\n\n\n问题名称\n链接\n\n\n\n\n1. 两数之和\nhttps://leetcode-cn.com/problems/two-sum/\n\n\n242. 有效的字母异位词\nhttps://leetcode-cn.com/problems/valid-anagram/\n\n\n49. 字母异位词分组\nhttps://leetcode-cn.com/problems/group-anagrams/\n\n\n169. 多数元素\nhttps://leetcode-cn.com/problems/majority-element/\n\n\n\n1 两之和\nfunc twoSum(nums []int, target int) []int {\n    data := map[int]int{}\n    for i, v := range nums{\n        n := target - v\n        j, ok := data[n]\n        if ok{\n            return []int{j, i}\n        }\n        data[v] = i\n    }\n    return nil\n}\n\n242. 有效的字母异位词\n异位词： 两个单词的字母数量是否相同\nfunc isAnagram(s string, t string) bool {\n    if len(s) != len(t){\n        return false\n    }\n    data := map[byte]int{}\n    for i := range s{\n        data[s[i]]++\n        data[t[i]]--\n    }\n\n    for _, v := range data{\n        if v != 0{\n            return false\n        }\n    }\n    return true\n}\n\n49. 字母异位词分组\n相同的移位词分到一个组里\n原理：\n首先把每个单词使用 sort 排序作为 key 放到 map 里， 然后 append 进去\nfunc groupAnagrams(strs []string) [][]string {\n    kind := map[string][]string{}\n    for _, s := range strs{\n        v := []byte(s)\n        sort.Slice(v, func(i, j int) bool{ return v[i] \n169. 多数元素\n是指该元素在这个数组中出现的次数超过数组的 50%\nfunc majorityElement(nums []int) int {\n    data := map[int]int{}\n    for _, v := range nums{\n        data[v]++\n    }\n    half := len(nums)/2\n    for num,count := range data{\n        if count > half{\n            return num\n        }\n    }\n    return -1\n}\n\n"},"tree/binary-tree.html":{"url":"tree/binary-tree.html","title":"二叉树","keywords":"","body":"二叉树\n\n\n\n问题名称\n难度\n链接\n\n\n\n\n144. 二叉树的前序遍历\nmedium\nhttps://leetcode-cn.com/problems/binary-tree-preorder-traversal/\n\n\n94. 二叉树的中序遍历\nmedium\nhttps://leetcode-cn.com/problems/binary-tree-inorder-traversal/\n\n\n145. 二叉树的后序遍历\nmedium\nhttps://leetcode-cn.com/problems/binary-tree-postorder-traversal/\n\n\n102. 二叉树的层序遍历\nmedium\nhttps://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n\n\n429. N 叉树的层序遍历\nMedium\nhttps://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/\n\n\n589. N 叉树的前序遍历\neasy\nhttps://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/\n\n\n590. N 叉树的后序遍历\neasy\nhttps://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/\n\n\n226. 翻转二叉树\neasy\nhttps://leetcode-cn.com/problems/invert-binary-tree/\n\n\n98. 验证二叉搜索树\nmedium\nhttps://leetcode-cn.com/problems/validate-binary-search-tree/\n\n\n111. 二叉树的最小深度\neasy\nhttps://leetcode-cn.com/problems/minimum-depth-of-binary-tree/\n\n\n104. 二叉树的最大深度\neasy\nhttps://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\n\n\n236. 二叉树的最近公共祖先\nmedium\nhttps://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/\n\n\n\n模板\n// 递归\nfunc tree(root *Tree){\n    if root == nil{\n        return nil\n    }\n\n    dfs(root)\n}\n\nfunc dfs(root *Tree){\n    if root == nil{\n        return\n    }\n    // todo\n    dfs(root.Left)\n    dfs(root.Right)\n}\n\n// 迭代\nfunc tree(root *Tree){\n    if root == nil{\n        return nil\n    }\n    res := []int{}\n    stack := []*Tree{root}\n    var node *Tree\n    for len(stack) > 0{\n        // todo\n    }\n    return res\n}\n\n144. 二叉树的前序遍历\n迭代实现\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc preorderTraversal(root *TreeNode) []int {\n    if root == nil{\n        return nil\n    }\n    res := []int{}\n    stack := []*TreeNode{root}\n    var node *TreeNode\n    for len(stack) > 0{\n        node, stack = pop(stack)\n        if node == nil{\n            continue\n        }\n        res = append(res, node.Val)\n        stack = append(stack,node.Right, node.Left)\n    }\n    return res\n}\n\nfunc pop(stack []*TreeNode)(*TreeNode, []*TreeNode){\n    return stack[len(stack)-1], stack[:len(stack)-1]\n}\n\n145. 二叉树的后序遍历\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc postorderTraversal(root *TreeNode) []int {\n    if root == nil{\n        return nil\n    }\n    res := []int{}\n    stack := []*TreeNode{root}\n    var node *TreeNode\n    for len(stack) > 0{\n        node, stack = pop(stack)\n        if node == nil{\n            continue\n        }\n        res = insert(res, node.Val)\n        stack = append(stack, node.Left, node.Right)\n    }\n    return res\n}\nfunc pop(stack []*TreeNode)(*TreeNode, []*TreeNode){\n    return stack[len(stack)-1], stack[:len(stack)-1]\n}\nfunc insert(nums []int, n int) []int{\n    return append([]int{n}, nums...)\n}\n\n94. 二叉树的中序遍历\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n*/\nfunc inorderTraversal(root *TreeNode) []int {\n    if root == nil{\n        return nil\n    }\n    res := []int{}\n    stack := []*TreeNode{}\n    node := root\n    for node != nil || len(stack) > 0{\n        for node != nil{\n            stack = append(stack, node)\n            node = node.Left\n        }\n        node, stack = pop(stack)\n        res = append(res, node.Val)\n        node = node.Right\n    }\n    return res\n}\n\nfunc pop(stack []*TreeNode)(*TreeNode, []*TreeNode){\n    return stack[len(stack)-1], stack[:len(stack)-1]\n}\n\n102. 二叉树的层序遍历\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nvar res [][]int\nfunc levelOrder(root *TreeNode) [][]int {\n    if root == nil{\n        return nil\n    }\n    res = make([][]int, 0)\n    dfs(root, 0)\n    return res\n}\n\nfunc dfs(root *TreeNode, level int){\n    if root == nil{\n        return\n    }\n    if len(res) == level{\n        res = append(res, []int{})\n    }\n    res[level] = append(res[level], root.Val)\n    dfs(root.Left, level+1)\n    dfs(root.Right, level+1)\n}\n\n429. N 叉树的层序遍历\n/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\nvar res [][]int\nfunc levelOrder(root *Node) [][]int {\n    if root == nil{\n        return nil\n    }\n    res = [][]int{}\n    dfs(root, 0)\n    return res\n}\n\nfunc dfs(root *Node,level int){\n    if root == nil{\n        return\n    }\n    if len(res) == level{\n        res = append(res, []int{})\n    }\n    res[level] = append(res[level], root.Val)\n    for i := range root.Children{\n        dfs(root.Children[i], level+1)\n    }\n}\n\n589. N 叉树的前序遍历\n/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc preorder(root *Node) []int {\n    if root == nil{\n        return nil\n    }\n    res := []int{}\n    stack := []*Node{root}\n    var node *Node\n    for len(stack) > 0{\n        node, stack = pop(stack)\n        if node == nil{\n            continue\n        }\n        res = append(res, node.Val)\n        for i := len(node.Children) -1; i >=0; i--{\n            stack = append(stack, node.Children[i])\n        }\n    }\n    return res\n}\n\nfunc pop(stack []*Node)(*Node, []*Node){\n    return stack[len(stack)-1], stack[:len(stack)-1]\n}\n\n递归实现\n/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nvar res []int\nfunc preorder(root *Node) []int {\n    if root == nil{\n        return nil\n    }\n    res = []int{}\n    dfs(root)\n    return res\n}\n\nfunc dfs(root *Node){\n    if root == nil{\n        return\n    }\n    res = append(res, root.Val)\n    for i := range root.Children{\n        dfs(root.Children[i])\n    }\n}\n\n590. N 叉树的后序遍历\n/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc postorder(root *Node) []int {\n    if root == nil{\n        return nil\n    }\n    res := []int{}\n    stack := []*Node{root}\n    var node *Node\n    for len(stack) > 0{\n        node, stack = pop(stack)\n        if node == nil{\n            continue\n        }\n        res = insert(res, node.Val)\n        stack = append(stack, node.Children...)\n    }\n    return res\n}\nfunc insert(nums []int, n int) []int{\n    return append([]int{n}, nums...)\n}\nfunc pop(stack []*Node)(*Node, []*Node){\n    return stack[len(stack)-1], stack[:len(stack)-1]\n}\n\n226. 翻转二叉树\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc invertTree(root *TreeNode) *TreeNode {\n    if root == nil{\n        return nil\n    }\n    invertTree(root.Left)\n    invertTree(root.Right)\n    root.Left, root.Right = root.Right, root.Left\n    return root\n}\n\n98. 验证二叉搜索树\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nvar min *TreeNode\nfunc isValidBST(root *TreeNode) bool {\n    if root == nil{\n        return true\n    }\n    min = &TreeNode{Val: -1 \n111. 二叉树的最小深度\n注意：如果树的一个子节点为空，另一个子节点不为空的话，前一个子节点就不能算。\n例子：\n1\n \\\n  3\n   \\\n    5\n     \\\n      8\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc minDepth(root *TreeNode) int {\n    if root == nil{\n        return 0\n    }\n    l := minDepth(root.Left)\n    r := minDepth(root.Right)\n    if root.Left == nil{\n        return r +1\n    }else if root.Right == nil{\n        return l +1\n    }else{\n        return min(l, r ) +1\n    }\n}\n\nfunc min(a, b int) int{\n    if a \n#\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxDepth(root *TreeNode) int {\n    if root == nil{\n        return 0\n    }\n    l := maxDepth(root.Left)\n    r := maxDepth(root.Right)\n    return max(l, r) +1\n}\nfunc max(a, b int) int{\n    if a > b{\n        return a\n    }\n    return b\n}\n\n#\n/**\n * Definition for TreeNode.\n * type TreeNode struct {\n *     Val int\n *     Left *ListNode\n *     Right *ListNode\n * }\n */\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    if root == nil{\n       return nil\n    }\n    if p.Val == root.Val || q.Val == root.Val{\n        return root\n    }\n    l := lowestCommonAncestor(root.Left, p,q)\n    r := lowestCommonAncestor(root.Right, p,q)\n    if l == nil{\n        return r\n    }else if r == nil{\n        return l\n    }\n    return root\n}\n\n"},"DP/":{"url":"DP/","title":"DP","keywords":"","body":"DP 问题的循序渐进\nDP 最优子问题\n\n[爬楼梯] https://leetcode-cn.com/problems/climbing-stairs/\n\n"},"DP/最优子问题.html":{"url":"DP/最优子问题.html","title":"最优子问题","keywords":"","body":"最优子问题\n\n\n\n问题名称\n链接\n\n\n\n\n70. 爬楼梯\nhttps://leetcode-cn.com/problems/climbing-stairs/\n\n\n322. 零钱兑换\nhttps://leetcode-cn.com/problems/coin-change/\n\n\n518. 零钱兑换 II\nhttps://leetcode-cn.com/problems/coin-change-2/\n\n\n62. 不同路径\nhttps://leetcode-cn.com/problems/unique-paths/\n\n\n63. 不同路径 II\nhttps://leetcode-cn.com/problems/unique-paths-ii/\n\n\n198. 打家劫舍\nhttps://leetcode-cn.com/problems/house-robber/\n\n\n213. 打家劫舍 II\nhttps://leetcode-cn.com/problems/house-robber-ii/\n\n\n\n异位词问题\n"}}}